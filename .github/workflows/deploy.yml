# name: Build and Deploy to Server

# on:
#   push:
#     branches: [main]
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checking out
#         uses: actions/checkout@v2
#       - name: Setting up node
#         uses: actions/setup-node@v2
#         with:
#           node-version: 16

#       - name: Installing yarn
#         run: npm install -g yarn

#       - name: Installing dependencies from lockfile
#         run: yarn install --frozen-lockfile

#       - name: Building app
#         run: yarn build

#       - name: Rsync to server
#         uses: Burnett01/rsync-deployments@5.2
#         with:
#           switches: -avzr --delete
#           path: ./
#           remote_path: ${{ secrets.REMOTE_DIR }}
#           remote_host: ${{ secrets.REMOTE_HOST }}
#           remote_user: ${{ secrets.REMOTE_USER }}
#           remote_key: ${{ secrets.SSH_KEY }}

name: deploy
on:
  workflow_dispatch:

env:
  IMAGE_NAME: "dwd"

jobs:
  build_and_publish:
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v3
      - name: Build image
        run: docker build -t ghcr.io/${{ github.actor }}/$IMAGE_NAME:latest .

      - name: Push the image
        run: docker push ghcr.io/${{ github.actor }}/$IMAGE_NAME:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_publish
    steps:
      - name: Deploy to Digital Ocean droplet via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,{{ github.actor }}
          script: |
            # Pull latest image
            docker pull ghcr.io/dmrwebdev/$IMAGE_NAME:latest
            # Stop running container
            docker stop $(echo $IMAGE_NAME)
            # Remove old container
            docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            docker run -d \
            --restart always \
            --name $(echo $IMAGE_NAME) \
            ghcr.io/dmrwebdev/$(echo $IMAGE_NAME):latest
